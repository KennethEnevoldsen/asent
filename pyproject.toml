[build-system]
requires = ["setuptools>=61.0.0", "wheel", "setuptools_scm"]
build-backend = "setuptools.build_meta"

[project]
name = "asent"
version = "0.7.4"
description = "A python package for flexible and transparent sentiment analysis."
authors = [
    { name = "Kenneth Enevoldsen", email = "kennethcenevoldsen@gmail.com" },
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
]
keywords = [
    "nlp",
    "sentiment analysis",
    "spacy",
    "spaCy",
    "spaCy 3",
    "text analysis",
    "aspect-based sentiment analysis",
    "ABSA",
]
requires-python = ">=3.8"

dependencies = ["spacy>=3.0.0", "matplotlib>=3.5.0"]

[project.readme]
file = "README.md"
content-type = "text/markdown"

[project.license]
file = "LICENSE"
name = "MIT"

[project.urls]
Homepage = "https://github.com/KennethEnevoldsen/asent"
repository = "https://github.com/KennethEnevoldsen/asent"
documentation = "https://kennethenevoldsen.github.io/asent/"

[project.optional-dependencies]
da = ["dacy>=1.1.0"]
all = ["nltk>=3.6.7"]
style = ["black>=22.12.0", "pre-commit>=2.20.0", "ruff>=0.0.263", "mypy>=0.991"]
tests = ["pytest>=7.1.3", "pytest-cov>=3.0.0"]
docs = [
    "sphinx>=5.3.0",
    "furo>=2022.12.7",
    "sphinx-copybutton>=0.5.1",
    "sphinxext-opengraph>=0.7.3",
    "sphinx_design>=0.3.0",
    "myst-nb>=0.6.0",
]
tutorials = ["jupyter>=1.0.0"]

[tool.coverage.run]
omit = ["**/tests/*", "**/_vendorized/*", "**/about.py"]

exclude_lines = [
    "pragma: no cover",
    # Don't complain about missing debug-only code:
    "def __unicode__",
    "def __repr__",
    "if self.debug",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
]

[tool.mypy]
ignore_missing_imports = true
no_implicit_optional = true
exclude = "dev/"

[tool.semantic_release]
branch = "main"
version_variable = ["pyproject.toml:version"]
build_command = "python -m pip install build; python -m build"

[tool.setuptools.package-data]
"*" = ["*.csv", "*.json", "*.txt"]

[tool.ruff]
exclude = [".venv", ".env", ".git", "__pycache__", "dev/**"]

[tool.setuptools.packages.find]
where = ["src"]

[tool.distutils.bdist_wheel]
universal = true

[tool.distutils.sdist]
formats = "gztar"
